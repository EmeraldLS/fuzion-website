---
import AdminLayout from "@/layouts/AdminLayout.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { Star } from "lucide-react";
import { formatCurrency } from "@/utils/utils";
import type { ProductItemResponse } from "@/model/model";

const { id } = Astro.params;

let product: ProductItemResponse | null = null;
let error: string | null = null;

try {
  const response = await fetch(`${Astro.url.origin}/api/private/single/${id}`);
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  product = await response.json();
} catch (err) {
  error = "An error occurred while fetching the product";
}

const specifications = product
  ? [
      { label: "Size", value: product.size },
      { label: "Motor", value: product.motor },
      { label: "Blade", value: product.blade },
      { label: "Pump", value: product.pump },
      { label: "Coating", value: product.coating },
    ].filter((spec) => spec.value)
  : [];
---

<AdminLayout title="Product">
  <main class="container mx-auto px-4 py-8">
    <div class="min-h-[400px]">
      {
        error && (
          <div
            class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative mb-6"
            role="alert"
          >
            <strong class="font-bold">Error: </strong>
            <span class="block sm:inline">{error}</span>
          </div>
        )
      }

      {
        !product && !error && (
          <div class="flex flex-col items-center justify-center space-y-4">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900" />
            <p class="text-gray-600">Loading product details...</p>
          </div>
        )
      }

      {
        product && (
          <div class="bg-white rounded-lg shadow-lg overflow-hidden">
            <div class="p-6 grid md:grid-cols-2">
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                    <span>{product.name}</span>
                    {product.is_new && (
                      <span class="ml-2 px-2 py-1 text-sm bg-green-100 text-green-800 rounded-full">
                        New
                      </span>
                    )}
                  </h1>
                </div>

                <div class="mb-6">
                  <img
                    src={`${product.image_url}`}
                    alt={`${product.name} image`}
                    class="max-h-96 object-cover rounded-lg shadow-md"
                  />
                </div>
              </div>

              <div class="flex flex-col justify-center">
                <div class="flex space-x-4 mb-6">
                  <span class="text-2xl font-bold text-gray-900">
                    {formatCurrency(product.price)}
                  </span>
                  {product.discount_percent > 0 && (
                    <span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm">
                      {product.discount_percent}% off
                    </span>
                  )}
                </div>

                <div class="mb-6">
                  <h2 class="text-xl font-semibold mb-2">Description</h2>
                  <p class="text-gray-700">{product.description}</p>
                </div>

                <div>
                  <h2 class="text-xl font-semibold mb-2">Specifications</h2>
                  <ul class="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-2">
                    {specifications.map((spec) => (
                      <li>
                        {spec.label}: {spec.value}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )
      }
    </div>
  </main>
</AdminLayout>
