---
import { Button } from "@/components/ui/button";
import AdminLayout from "@/layouts/AdminLayout.astro";
import { categories } from "@/utils/mockData";
---

<AdminLayout title="Update Product">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
      <p id="response-message" class="text-center mt-4 text-sm"></p>
      <h1 class="text-2xl font-bold mb-6">Update Product</h1>
      <form id="update-product-form" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700"
            >Product Name</label
          >
          <input
            type="text"
            id="name"
            name="name"
            required
            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
          />
        </div>

        <div>
          <label for="price" class="block text-sm font-medium text-gray-700"
            >Price</label
          >
          <input
            type="number"
            id="price"
            name="price"
            required
            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
          />
        </div>
        <div>
          <label for="discount" class="block text-sm font-medium text-gray-700"
            >Discount Percent</label
          >
          <input
            type="number"
            id="discount"
            name="discount"
            required
            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
          />
        </div>

        <div>
          <label
            for="description"
            class="block text-sm font-medium text-gray-700">Description</label
          >
          <textarea
            id="description"
            name="description"
            required
            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
          ></textarea>
        </div>

        <div>
          <label for="category" class="">Category</label>

          <select
            id="category"
            name="category"
            class="block text-sm font-medium text-gray-700 w-full p-2"
          >
            {
              categories.map((cat) => (
                <option value={cat.id}>{cat.name}</option>
              ))
            }
          </select>
        </div>

        <fieldset>
          <legend class="text-lg font-medium text-gray-700"
            >Specifications</legend
          >
          <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label for="size" class="block text-sm font-medium text-gray-700"
                >Size</label
              >
              <input
                type="text"
                id="size"
                name="specifications.size"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
              />
            </div>

            <div>
              <label for="motor" class="block text-sm font-medium text-gray-700"
                >Motor</label
              >
              <input
                type="text"
                id="motor"
                name="specifications.motor"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
              />
            </div>

            <div>
              <label for="blade" class="block text-sm font-medium text-gray-700"
                >Blade</label
              >
              <input
                type="text"
                id="blade"
                name="specifications.blade"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
              />
            </div>

            <div>
              <label for="pump" class="block text-sm font-medium text-gray-700"
                >Pump</label
              >
              <input
                type="text"
                id="pump"
                name="specifications.pump"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
              />
            </div>

            <div>
              <label
                for="coating"
                class="block text-sm font-medium text-gray-700">Coating</label
              >
              <input
                type="text"
                id="coating"
                name="specifications.coating"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"
              />
            </div>
          </div>
        </fieldset>

        <Button
          type="submit"
          className="w-full bg-main text-white py-2 rounded-md hover:bg-main"
        >
          Update Product
        </Button>
      </form>
    </div>
  </main>
</AdminLayout>

<script>
  import type { ProductItemResponse } from "@/model/model";
  import { formatCurrency } from "@/utils/utils";

  const form = document.getElementById(
    "update-product-form"
  ) as HTMLFormElement;
  const responseMessage = document.getElementById(
    "response-message"
  ) as HTMLParagraphElement;
  const paths = location.pathname.split("/");
  const id = paths[3];

  async function fetchProductDetails() {
    try {
      const response = await fetch(`/api/private/single/${id}`);
      const product = (await response.json()) as ProductItemResponse;

      if (response.ok) {
        (document.getElementById("name") as HTMLInputElement).value =
          product.name;
        (document.getElementById("price") as HTMLInputElement).value =
          product.price.toString();
        (document.getElementById("discount") as HTMLInputElement).value =
          product.discount_percent.toString();
        (document.getElementById("description") as HTMLInputElement).value =
          product.description;
        (document.getElementById("category") as HTMLInputElement).value =
          product.category;

        (document.getElementById("size") as HTMLInputElement).value =
          product.size;
        (document.getElementById("motor") as HTMLInputElement).value =
          product.motor;
        (document.getElementById("blade") as HTMLInputElement).value =
          product.blade;
        (document.getElementById("pump") as HTMLInputElement).value =
          product.pump;
        (document.getElementById("coating") as HTMLInputElement).value =
          product.coating;
      } else {
        responseMessage.textContent = "Failed to load product details.";
        responseMessage.classList.add("text-red-600");
      }
    } catch (error) {
      responseMessage.textContent =
        "An error occurred while loading the product details.";
      responseMessage.classList.add("text-red-600");
    }
  }

  fetchProductDetails();

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const body = {
      name: formData.get("name"),
      price: parseFloat(formData.get("price")?.toString() || "0"),
      description: formData.get("description"),
      category: formData.get("category"),
      specifications: {
        size: formData.get("specifications.size"),
        motor: formData.get("specifications.motor"),
        blade: formData.get("specifications.blade"),
        pump: formData.get("specifications.pump"),
        coating: formData.get("specifications.coating"),
      },
    };

    try {
      const response = await fetch(`/api/private/single/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      const data = await response.json();
      if (response.ok) {
        responseMessage.textContent = "Product updated successfully!";
        responseMessage.classList.add("text-green-600");
      } else {
        responseMessage.textContent = data.error || "Failed to update product.";
        responseMessage.classList.add("text-red-600");
      }
    } catch (error) {
      responseMessage.textContent =
        "An error occurred while updating the product.";
      responseMessage.classList.add("text-red-600");
    }
  });
</script>
