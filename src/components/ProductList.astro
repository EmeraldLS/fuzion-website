---
import AdminLayout from "@/layouts/AdminLayout.astro";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { AlertCircle } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { formatCurrency } from "@/utils/utils";
import type { ProductItemResponse } from "@/model/model";

const ITEMS_PER_PAGE = 10;

const currentPage = Number(Astro.url.searchParams.get("page")) || 1;

let products: ProductItemResponse[] = [];
let totalPages = 0;
let error = null;

try {
  const response = await fetch(
    `${Astro.url.origin}/api/private/product?page=${currentPage}&limit=${ITEMS_PER_PAGE}`
  );
  if (!response.ok) {
    throw new Error("Failed to fetch products");
  }
  const data = await response.json();
  products = data.products;
  totalPages = Math.ceil(data.total / ITEMS_PER_PAGE);
} catch (err) {
  error = "An error occurred while fetching products";
}

const paginationLinks = Array.from({ length: totalPages }, (_, i) => i + 1);
---

<div class="py-4 space-x-4 bg-white">
  {
    error && (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }

  <Table>
    <TableHeader>
      <TableRow>
        <TableHead>Name</TableHead>
        <TableHead>Price</TableHead>
        <TableHead>New</TableHead>
        <TableHead>Actions</TableHead>
      </TableRow>
    </TableHeader>
    <TableBody>
      {
        products.map((product) => (
          <TableRow key={product.id}>
            <TableCell>
              <a href={`/admin/products/${product.id}`}>{product.name}</a>
            </TableCell>
            <TableCell>{formatCurrency(product.price)}</TableCell>
            <TableCell>{product.is_new ? "Yes" : "No"}</TableCell>
            <TableCell>
              <a href={`/admin/products/edit/${product.id}`}>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  className="mr-2"
                >
                  Edit
                </Button>
              </a>

              <Button
                type="button"
                variant="destructive"
                size="sm"
                data-delete-button
                data-product-id={product.id}
                data-image-url={product.image_url}
              >
                Delete
              </Button>

              <dialog
                id={`delete-dialog-${product.id}`}
                class="rounded-lg p-6 backdrop:bg-black backdrop:bg-opacity-50"
              >
                <div class="space-y-4">
                  <h3 class="text-lg font-medium">Delete Product</h3>
                  <p>
                    Are you sure you want to delete this product? This action
                    cannot be undone.
                  </p>
                  <div class="flex justify-end space-x-2">
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      data-cancel
                    >
                      Cancel
                    </Button>
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      data-confirm
                    >
                      Delete
                    </Button>
                  </div>
                </div>
              </dialog>
            </TableCell>
          </TableRow>
        ))
      }
    </TableBody>
  </Table>

  {
    products.length === 0 && (
      <div class="text-center py-4">No products found.</div>
    )
  }

  <Pagination>
    <PaginationContent>
      <PaginationItem>
        <PaginationPrevious
          href={currentPage > 1 ? `?page=${currentPage - 1}` : "#"}
          className={currentPage <= 1 ? "pointer-events-none opacity-50" : ""}
        />
      </PaginationItem>

      {
        paginationLinks.map((page) => (
          <PaginationItem>
            <PaginationLink
              href={`?page=${page}`}
              data-active={currentPage === page}
            >
              {page}
            </PaginationLink>
          </PaginationItem>
        ))
      }

      <PaginationItem>
        <PaginationNext
          href={currentPage < totalPages ? `?page=${currentPage + 1}` : "#"}
          className={currentPage >= totalPages
            ? "pointer-events-none opacity-50"
            : ""}
        />
      </PaginationItem>
    </PaginationContent>
  </Pagination>
</div>

<script>
  async function deleteProduct(productId: string, imageURL: string) {
    try {
      const response = await fetch(`/api/private/single/${productId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        throw new Error("Failed to delete product");
      }

      if (imageURL && imageURL.includes("supabase.co")) {
        const filename = imageURL.split("/").pop();
        console.log("Filename to delete:", filename);

        if (filename) {
          try {
            const imageDeleteResponse = await fetch(
              `/api/private/image/${filename}`,
              {
                method: "DELETE",
              }
            );

            if (!imageDeleteResponse.ok) {
              throw new Error(
                `Failed to delete image: ${imageDeleteResponse.statusText}`
              );
            }

            console.log("Image deleted successfully:", filename);
          } catch (error) {
            console.error("Error deleting image:", error);
          }
        }
      }

      window.location.reload();
    } catch (err) {
      console.error("Error deleting product:", err);
      alert("Failed to delete product");
    }
  }

  document.querySelectorAll("[data-delete-button]").forEach((button) => {
    button.addEventListener("click", (e) => {
      //@ts-ignore
      const productId = e.target.dataset.productId;
      const dialog = document.querySelector(`#delete-dialog-${productId}`);
      //@ts-ignore
      dialog?.showModal();
    });
  });

  document.querySelectorAll("dialog").forEach((dialog) => {
    dialog.querySelector("[data-cancel]")?.addEventListener("click", () => {
      dialog.close();
    });

    dialog.addEventListener("click", (e) => {
      if (e.target === dialog) {
        dialog.close();
      }
    });

    dialog.querySelector("[data-confirm]")?.addEventListener("click", () => {
      const productId = dialog.id.replace("delete-dialog-", "");
      const deleteButton = document.querySelector(
        `[data-product-id="${productId}"]`
      );
      //@ts-ignore
      const imageURL = deleteButton?.dataset.imageUrl;

      deleteProduct(productId, imageURL);
      dialog.close();
    });
  });
</script>
